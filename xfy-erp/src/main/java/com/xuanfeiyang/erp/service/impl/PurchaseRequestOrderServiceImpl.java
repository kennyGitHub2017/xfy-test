package com.xuanfeiyang.erp.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xuanfeiyang.common.mybatis.pageable.Page;
import com.xuanfeiyang.common.mybatis.pageable.PageRequest;
import com.xuanfeiyang.erp.dao.GoodsSupplierDao;
import com.xuanfeiyang.erp.dao.PurchaseOrderLogDao;
import com.xuanfeiyang.erp.dao.PurchaseRequestOrderDao;
import com.xuanfeiyang.erp.domain.GoodsSupplier;
import com.xuanfeiyang.erp.domain.PurchaseOrder;
import com.xuanfeiyang.erp.domain.PurchaseOrderItem;
import com.xuanfeiyang.erp.domain.PurchaseOrderLog;
import com.xuanfeiyang.erp.domain.PurchaseRequestOrder;
import com.xuanfeiyang.erp.domain.PurchaseRequestOrderItem;
import com.xuanfeiyang.erp.param.PurchaseRequestOrderParam;
import com.xuanfeiyang.erp.service.PurchaseOrderService;
import com.xuanfeiyang.erp.service.PurchaseRequestOrderService;
@Service("purchaseRequestOrderService")
public class PurchaseRequestOrderServiceImpl implements PurchaseRequestOrderService{
	@Resource
	private PurchaseRequestOrderDao purchaseRequestOrderDao;
	@Resource
	private PurchaseOrderService purchaseOrderService;
	@Resource
	private PurchaseOrderLogDao purchaseOrderLogDao;
	
	@Resource
	private GoodsSupplierDao goodsSupplierDao;
	
	public void setPurchaseRequestOrderDao(
			PurchaseRequestOrderDao purchaseRequestOrderDao) {
		this.purchaseRequestOrderDao = purchaseRequestOrderDao;
	}

	public void setPurchaseOrderService(PurchaseOrderService purchaseOrderService) {
		this.purchaseOrderService = purchaseOrderService;
	}

	@Override
	@Transactional
	public Integer add(PurchaseRequestOrder instance,List<PurchaseRequestOrderItem> items) {
		purchaseRequestOrderDao.insert(instance);
		String orderNo = instance.getOrderNo();
		for(PurchaseRequestOrderItem item:items){
			item.setOrderNo(orderNo);
			purchaseRequestOrderDao.insertItem(item);
		}
		return instance.getId();
	}

	@Override
	public PurchaseRequestOrder get(Integer id) {
		return purchaseRequestOrderDao.get(id);
	}

	@Override
	public List<PurchaseRequestOrderItem> findItem(Integer id) {
		return purchaseRequestOrderDao.findItem(id);
	}

	@Override
	public List<PurchaseRequestOrder> detail(Integer id) {
		return purchaseRequestOrderDao.detail(id);
	}

	@Override
	public Page<PurchaseRequestOrder> findPage(PageRequest pageRequest,
			PurchaseRequestOrderParam param) {
		return purchaseRequestOrderDao.findPage(pageRequest, param);
	}

	@Override
	@Transactional
	public void update(PurchaseRequestOrder instance,List<PurchaseRequestOrderItem> items){
		purchaseRequestOrderDao.update(instance);
		if (null==items || items.size()==0){
			return;
		}
		purchaseRequestOrderDao.deleteItem(instance.getOrderNo());
		String orderNo = instance.getOrderNo();
		for(PurchaseRequestOrderItem item:items){
			if (null==item.getOrderNo() || "".equals(item.getOrderNo())){
				item.setOrderNo(orderNo);
			}
			purchaseRequestOrderDao.insertItem(item);
		}
	}

	@Override
	@Transactional
	public void remove(Integer id) {
		PurchaseRequestOrder pror = purchaseRequestOrderDao.get(id);
		if (null==pror){
			return;
		}
		purchaseRequestOrderDao.deleteItem(pror.getOrderNo());
		purchaseRequestOrderDao.delete(id);
	}

	@Override
	//根据请购单及子项生成采购数据
	@Transactional
	public void generateOrder(PurchaseRequestOrder reqOrder,
			List<PurchaseRequestOrderItem> reqitems,List<PurchaseRequestOrder> reqorders,String orderNo,String operator) {
		//生成采购单对象
		PurchaseOrder order = new PurchaseOrder();
		order.setOrderNo(orderNo);
		order.setCreatedUserId(reqOrder.getCreatedUserId());
		order.setSupplierId(reqOrder.getSupplierId());
		order.setBuyUserId(reqOrder.getBuyUserId());
		order.setPurchaseRequestId(reqOrder.getId());
		order.setPurchaseDate(reqOrder.getCreatedTime());
		order.setIsSample((short)0);			//默认设置为采购订单			0:采购订单  1:样本采购
		GoodsSupplier supplier = goodsSupplierDao.load(reqOrder.getSupplierId());
		order.setPayMethod(supplier!=null?supplier.getPayMethod():"");					//设置为请购单对应供应商的支付方式
		order.setNote("generated by system");
		order.setStatus((short)1);
		order.setType((short)1);
		order.setDeliveryDate(reqOrder.getDeliveryDate());
		//生成采购单详情项
		List<PurchaseOrderItem> orderitem = new ArrayList<PurchaseOrderItem>();
		PurchaseOrderItem oitem = null;
		if (null!=reqitems && reqitems.size()>0){
			for(PurchaseRequestOrderItem item:reqitems){
				Date deliveryDate = reqOrder.getDeliveryDate();
				deliveryDate = deliveryDate==null?item.getDeliveryDate():deliveryDate;
				oitem = new PurchaseOrderItem(item.getGoodsSku(),item.getGoodsName(),item.getGoodsCost(),
						item.getGoodsCount(),item.getGoodsUnit(),item.getGoodsCategory(),null,deliveryDate,item.getGoodsCategory().toString());
				oitem.setReceivedCount(0);
				oitem.setQualifiedCount(0);
				oitem.setUnQualifiedCount(0);
				orderitem.add(oitem);
			}
		}
		purchaseOrderService.add(order, orderitem);
		//回写请购单数据(请购单状态及采购单号)
		StringBuffer reqOrderId = new StringBuffer("[");
		for(PurchaseRequestOrder prorder:reqorders){
			prorder.setStatus((short)2);
			prorder.setPurchaseOrderId(order.getId().toString());
			prorder.setPurchaseDate(order.getPurchaseDate());
			prorder.setLastUpdatedTime(new Date());
			update(prorder,null);
			reqOrderId.append(prorder.getOrderNo()+",");
		}
		reqOrderId.replace(reqOrderId.length()-1, reqOrderId.length()-1, "]");
		//记录采购单生成日志
		PurchaseOrderLog log = new PurchaseOrderLog();
		log.setOrderSn(orderNo);
		log.setCreatedTime(new Date());
		log.setNewStatus(order.getStatus());
		log.setContent("请购单".concat(reqOrderId.toString()).concat("生成采购单"));
		log.setOperUser(operator);
		purchaseOrderLogDao.insert(log);
	}
	
}
